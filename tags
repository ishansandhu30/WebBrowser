!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DRIVER_H	driver.h	2;"	d
LINKEDLIST_H	linkedlist.h	2;"	d
TEST_H	test.h	2;"	d
addAfterCurr	history.c	/^void addAfterCurr(list* l, char* url){$/;"	f
addAfterCurrTest	test.c	/^int addAfterCurrTest(){$/;"	f
append	linkedlist.c	/^void append(void* data, int size, list* l){$/;"	f
appendNodes	test.c	/^list* appendNodes(){$/;"	f
appendTest	test.c	/^void appendTest(){	$/;"	f
back	linkedlist.c	/^void back(list* l){$/;"	f
backForwardTest	test.c	/^int backForwardTest(){	$/;"	f
countUrlChar	history.c	/^int countUrlChar(list* l){$/;"	f
createList	linkedlist.c	/^list* createList(int maxSize){$/;"	f
createNode	linkedlist.c	/^node* createNode(void* data,int size){$/;"	f
createNodeTest	test.c	/^void createNodeTest(){$/;"	f
createPad	history.c	/^char* createPad(int size){$/;"	f
curr	linkedlist.h	/^	node* curr;$/;"	m	struct:list
data	linkedlist.h	/^	void* data;$/;"	m	struct:node
decryptChar	history.c	/^char decryptChar(FILE* pad, char c){$/;"	f
decryptNum	history.c	/^int decryptNum(FILE* pad, int num){$/;"	f
delList	linkedlist.c	/^void delList(list* l){$/;"	f
delNode	linkedlist.c	/^void delNode(node* n){$/;"	f
encryptNum	history.c	/^int encryptNum(FILE* pad, int num){$/;"	f
encryptURL	history.c	/^void encryptURL(FILE* pad, char* url){$/;"	f
forget	linkedlist.c	/^void forget(list* l){$/;"	f
forgetNodeTest	test.c	/^int forgetNodeTest(){$/;"	f
forward	linkedlist.c	/^void forward(list* l){$/;"	f
head	linkedlist.h	/^	node* head;$/;"	m	struct:list
list	linkedlist.h	/^typedef struct list{$/;"	s
list	linkedlist.h	/^}list;$/;"	t	typeref:struct:list
main	main.c	/^int main(int argc, char* argv[]){$/;"	f
main	quizPrac.c	/^int main(){$/;"	f
maxSize	linkedlist.h	/^	int maxSize;	$/;"	m	struct:list
next	linkedlist.h	/^	struct node* next;	$/;"	m	struct:node	typeref:struct:node::node
node	linkedlist.h	/^typedef struct node{$/;"	s
node	linkedlist.h	/^}node;$/;"	t	typeref:struct:node
pos	linkedlist.h	/^	int pos;\/\/position of current$/;"	m	struct:list
prev	linkedlist.h	/^	struct node* prev;$/;"	m	struct:node	typeref:struct:node::node
printCurrForward	linkedlist.c	/^void printCurrForward(list* l){$/;"	f
printCurrReverse	linkedlist.c	/^void printCurrReverse(list* l){$/;"	f
printEntireList	linkedlist.c	/^void printEntireList(list* l){$/;"	f
printTest	test.c	/^int printTest(){	$/;"	f
readFile	history.c	/^int readFile(char* f, char* padFile, list* l){$/;"	f
readPad	history.c	/^char* readPad(char* padFile){$/;"	f
readUrl	history.c	/^char* readUrl(FILE* f, FILE* pad){$/;"	f
readWriteTest	test.c	/^int readWriteTest(){$/;"	f
removeNode	linkedlist.c	/^void removeNode(list* l){$/;"	f
removeNodeTest	test.c	/^int removeNodeTest(){$/;"	f
size	linkedlist.h	/^	int size;$/;"	m	struct:list
tail	linkedlist.h	/^	node* tail;$/;"	m	struct:list
writeFile	history.c	/^int writeFile(char* f, char* padFile, list* l){$/;"	f
writePad	history.c	/^void writePad(FILE* padFile, char* pad){$/;"	f
